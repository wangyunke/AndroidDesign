plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdkVersion 33
    namespace 'com.i.designpattern'

    defaultConfig {
        applicationId "com.i.designpattern"
        minSdkVersion 29
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        debug {

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {
            storeFile file('./platform.keystore')
            storePassword 'android'
            keyAlias 'platform'
            keyPassword 'android'
        }
        release {
            storeFile file('./platform.keystore')
            storePassword 'android'
            keyAlias 'platform'
            keyPassword 'android'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
        buildConfig true
        aidl true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    implementation project(':lib_network')

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'io.reactivex:rxjava:1.0.14'
    implementation 'io.reactivex:rxandroid:1.0.1'
    implementation 'com.squareup.okhttp:okhttp:2.4.0'
    implementation 'com.squareup.okio:okio:1.5.0'

    implementation 'com.google.code.gson:gson:2.7'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9")
    implementation("androidx.activity:activity-ktx:1.7.2")

    //OkDownload
    implementation 'com.liulishuo.okdownload:okdownload:1.0.7'
    implementation 'com.liulishuo.okdownload:sqlite:1.0.7'
}


/*
def build_tools_version = "30.0.3"
def sdkPath = project.android.getSdkDirectory().getAbsolutePath()
def buildToolsPath = "${sdkPath}${File.separator}build-tools${File.separator}${build_tools_version}${File.separator}"
def sdkAddOnPath = "${sdkPath}${File.separator}add-ons${File.separator}addon-hcp3_android_sdk_apis-harman-31${File.separator}"
def signingKeysPath = "${sdkAddOnPath}signing${File.separator}"
def apkSignerBatPath = buildToolsPath + 'apksigner'
def keyFile = signingKeysPath + 'platform.pk8'
def certFile = signingKeysPath + 'platform.x509.pem'
def buildDir = "${project.getBuildDir()}"

tasks.whenTaskAdded { task ->
    if (task.name.indexOf('assemble') > -1) {
        task.doLast {

            //always sign /outputs and /intermediates!
            def allApks = []

            def apkPathOutputs = new File("${buildDir}${File.separator}outputs${File.separator}apk${File.separator}")
            if (apkPathOutputs.exists()) {
                apkPathOutputs.eachFileRecurse(groovy.io.FileType.FILES) {
                    if (it.name.endsWith(".apk")) {
                        allApks << it
                    }
                }
            }

            if (allApks.isEmpty()) {
                println "apks are missing/not generated. Please try again, if problem persists, give a clean build."
                return
            }

            for (apk in allApks) {
                println "signing $apk"
                def signerCommand = [apkSignerBatPath, 'sign', '--key', keyFile, '--cert', certFile, apk]
                exec {
                    commandLine signerCommand
                }
            }

        }
    }
}*/
